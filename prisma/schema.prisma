generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://doubtss:doubtss123@doubtss-prod.cum2lhkyqa9p.ap-south-1.rds.amazonaws.com:5432/init" // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String     @unique
  password      String
  emailVerified DateTime?  @map("email_verified")
  createdAt     DateTime   @default(now())
  lastSeen      DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  feedBack      FeedBack[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model LikedMessages {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  @@map("liked_messages")
}

model DislikedMessages {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  @@map("disliked_messages")
}

model FeedBack {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("feedback")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model TechnialPrompt {
  id                                   String @id @default(cuid())
  generateQuestionForContentPrompt     String
  generateQuestionPromptWithVectorData String
  generateQuestionPrompt               String
  regeneratePrompt                     String
  summaryPrompt                        String
  summaryPromptWithVectorData          String

  @@map("technial_prompts")
}

// model Message {
//   id             String   @id @default(uuid())
//   content        String
//   isUser         Boolean  @default(false) 
//   user           User     @relation(fields: [userId], references: [id])
//   userId         String   
//   createdAt      DateTime @default(now())
// }
